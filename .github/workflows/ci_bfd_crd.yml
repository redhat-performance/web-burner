name: CI

on:
  push:
    branches: [ "*" ]
    paths-ignore:
    - '**.md'
    - '**.sh'
  pull_request:
    branches: [ "*" ]
    paths-ignore:
    - '**.md'
    - '**.sh'
  schedule:
    - cron: 0 3 * * *

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # ovn-kubernetes
      ENABLE_MULTI_NET: "true"
      KIND_INSTALL_INGRESS: "false"
      KIND_INSTALL_METALLB: "false"
      KIND_INSTALL_PLUGINS: "true"
      KIND_IPV4_SUPPORT: "true"
      KIND_IPV6_SUPPORT: "false"
      KUBECONFIG: "/home/runner/ovn.conf"
      OVN_DISABLE_SNAT_MULTIPLE_GWS: "true"
      OVN_ENABLE_INTERCONNECT: "true"
      OVN_GATEWAY_MODE: "shared"
      OVN_HYBRID_OVERLAY_ENABLE: "false"
      # web-burner
      BFD: "true"
      BRIDGE: "breth0"
      BURST: "20"
      CRD: "true"
      ES_SERVER: ""
      ES_INDEX: ""
      ICNI: "true"
      INDEXING: ""
      KUBE_BURNER_RELEASE: "1.7.12"
      LIMITCOUNT: "1"
      PROBE: "true"
      QPS: "20"
      SCALE: "1"
      SRIOV: "false"

    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'ovn-org/ovn-kubernetes'
          fetch-depth: 1

      - name: Free up disk space
        run: sudo eatmydata apt-get remove --auto-remove -y aspnetcore-* dotnet-* libmono-* mono-* msbuild php-* php7* ghc-* zulu-*

      - name: Disable ufw
        # For IPv6 and Dualstack, ufw (Uncomplicated Firewall) should be disabled.
        # Not needed for KIND deployments, so just disable all the time.
        run: |
          sudo ufw disable

      - name: Docker setup
        # Mimic Scale Lab
        run: |
          echo '{"bip":"172.17.0.1/16","default-address-pools":[{"base":"192.168.216.0/21","size":21},{"base":"172.17.0.0/12","size":16}]}' | sudo tee /etc/docker/daemon.json
          docker network prune
          sudo systemctl restart docker

      - name: Kind setup
        timeout-minutes: 30
        run: |
          make -C test install-kind
          kubectl get po -A

      - name: Kube-burner setup
        run: |
          curl  https://github.com/cloud-bulldozer/kube-burner/releases/download/v${KUBE_BURNER_RELEASE}/kube-burner-V${KUBE_BURNER_RELEASE}-Linux-x86_64.tar.gz -Lo kube-burner.tar.gz
          sudo tar -xvzf kube-burner.tar.gz -C /usr/local/bin/
          kube-burner version

      - uses: actions/checkout@v3

      - name: Cordon master node
        run: |
          kubectl cordon ovn-control-plane

      - name: Label worker-lb node
        # ovn-worker for lbs/serving pods and ovn-worker2 for apps/served pods
        run: |
          docker ps
          kubectl label node ovn-worker node-role.kubernetes.io/worker-spk="" --overwrite=true
          kubectl get node -o wide

      - name: Create lb/serving pods
        timeout-minutes: 15
        run: |
          kube-burner init -c workload/cfg_icni2_serving_resource_init.yml --uuid 1234 --timeout 10m
          kubectl get po -A -o wide
        continue-on-error: true

      - name: Describe lb/serving pod
        timeout-minutes: 2
        run: |
          kubectl -n serving-ns-0 describe $(kubectl get po -n serving-ns-0 -o name | head -n1)

      - name: Create node-density app/served pods
        timeout-minutes: 10
        run: |
          echo 5000 | sudo tee /proc/sys/kernel/keys/maxkeys
          kube-burner init -c workload/cfg_icni2_node_density2.yml --uuid 1235
          kubectl get ns
          kubectl get po -n served-ns-0 -o wide | head
          echo "Number of serving running pods (expect 4):"
          SERVING_PODS=$(kubectl get po -A | grep serving | grep Running | wc -l)
          echo $SERVING_PODS
          echo "Number of served running pods (expect 61):"
          SERVED_PODS=$(kubectl get po -A | grep served | grep Running | wc -l)
          echo $SERVED_PODS
          echo "Number of serving deployments (expect 4):"
          SERVING_DEPLOYS=$(kubectl get deploy -A | grep serving | wc -l)
          echo $SERVING_DEPLOYS
          echo "Number of served deployments (expect 1):"
          SERVED_DEPLOYS=$(kubectl get deploy -A | grep served | wc -l)
          echo $SERVED_DEPLOYS
          echo "Number of served services (expect 1):"
          SERVED_SVCS=$(kubectl get service -A | grep served | wc -l)
          echo $SERVED_SVCS
          if [ $SERVING_PODS != 4 ] || [ $SERVED_PODS != 61 ] || [ $SERVING_DEPLOYS != 4 ] || [ $SERVED_DEPLOYS != 1 ] || [ $SERVED_SVCS != 1 ]  ; then
             echo "Incorrect number of objects"
             exit 1
          fi
